getwd()
library(rvest)
install.packages("rvest")
library(rvest)
wikiURL <- 'https://en.wikipedia.org/wiki/List_of_United_States_presidential_elections_by_popular_vote_margin'
wikiURL
temp <- wikiURL %>%
read_html %>%
html_nodes("table")
table
temp
html_table(temp)
html_table(temp[1])
html_table(temp[2])
html_table(temp[3])
dim(temp)
dim(html_table(temp))
html_table(temp[3], fill=T)
table<-html_table(temp[2])
table
str(table)
unlist(table)
str(table)
table<-table[[1]]
table
head(table)
names(table)
names(table)<-c("Term_Number", "Year_Elected", "Winner",
"Winner_Party", "Winner_Pop_Vote_%", "Pop_Vote_%_Margin",
"Winner_Pop_Vote_Raw", "Winner_Pop_Vote_Margin",
"Runner-Up", "Runner-Up_Party", "Turnout")
head(table)
table<-table[-c(1,2),]
head(table)
rownames(table)
rownames(table)<-NULL
rownames(table)
head(table)
str(table)
head(table$Winner)
nchar(table$Winner[1])
nchar(table$Winner[1:5])
nchar(table$Winner[1:5])/2
as.integer(nchar(table$Winner[1:5]))/2
ceiling(nchar(table$Winner[1:5])/2)
halfChars<-function(x) ceiling((nchar(x))/2)
halfChars(35)
halfChars("Let's test this out")
table$WinnerUgly<-table$Winner
head(table)
table$WinnerUgly
table$WinnerUgly
table$Winner<-apply(table$WinnerUgly, halfChars)
mat1 <- matrix(rep(seq(4), 4), ncol = 4)
mat1
mat1.df <- data.frame(mat1)
lapply(mat1.df, sum)
table$Winner<-lapply(table$WinnerUgly, halfChars)
table$Winner
?substr
halfChars<-function(x) substring(x, 1, ceiling((nchar(x))/2))
halfChars("Let's test this out")
table$WinnerUgly
table$Winner<-lapply(table$WinnerUgly, halfChars)
table$Winner
names(table)
head(table)
head(table$Runner-Up)
head(table$`Runner-Up`)
table$Runner_Up<-lapply(table$`Runner-Up`, halfChars)
table$Runner_Up
table$Winner
rm(list=ls())
library(rvest)
wikiURL <- 'https://en.wikipedia.org/wiki/List_of_United_States_presidential_elections_by_popular_vote_margin'
temp <- wikiURL %>%
read_html %>%
html_nodes("table")
table<-html_table(temp[2])
str(table)
table<-table[[1]]
names(table)<-c("Term_Number", "Year_Elected", "Winner",
"Winner_Party", "Winner_Pop_Vote_%", "Pop_Vote_%_Margin",
"Winner_Pop_Vote_Raw", "Winner_Pop_Vote_Margin",
"Runner_Up", "Runner_Up_Party", "Turnout")
head(table)
table<-table[-c(1,2),]
rownames(table)<-NULL ## I guess that just reset them to start at 1...
rownames(table)
str(table)
head(table$Winner)
nchar(table$Winner[1:5])
ceiling(nchar(table$Winner[1:5])/2)
substr(table$Winner[1:5], 1, ceiling(nchar(table$Winner[1:5])/2))
halfChars<-function(x) substring(x, 1, ceiling((nchar(x))/2))
halfChars("Let's test this out")
library(plyr)
table$test<-ddply(table$Winner, halfChars)
table$test<-sapply(table$Winner, halfChars)
table$test
table<-table[,-"test"]
table<-table[,-(which(names(table)=="test"))]
head(table)
table$Winner<-sapply(table$Winner, halfChars)
table$Runner_Up<-sapply(table$Runner_Up, halfChars)
head(table)
separate% <- function(foo) {
hold<-strsplit(foo, "//%//")
return(hold[length(hold)])}
separate% <- function(foo) {
separator <- function(foo) {
hold<-strsplit(foo, "//%//")
return(hold[length(hold)])
}
separator(c("this%that", "these%those"))
separator <- function(foo) {
hold<-strsplit(foo, "//%//")
return(hold[[length(hold)]])
}
separator(c("this%that", "these%those"))
separator <- function(foo) {
hold<-strsplit(foo, "//%//")
return(hold)
}
separator(c("this%that", "these%those"))
separator <- function(foo) {
hold<-strsplit(foo, "%")
return(hold)
}
separator(c("this%that", "these%those"))
separator <- function(foo) {
hold<-strsplit(foo, "%")
return(unlist(hold))
}
separator(c("this%that", "these%those"))
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`)
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
head(table$Percent_Margin)
for (i in 1:nrow(table)){
table$Percent_Margin<-table$Percent_Margin[[i]][2]
}
head(table$Percent_Margin)
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
head(table$Percent_Margin)
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="-")
}
head(table$Percent_Margin)
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="//-")
}
head(table$Percent_Margin)
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
}
head(table$Percent_Margin)
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
}
table$Percent_Margin
rm(list=ls())
library(plyr)
library(rvest)
wikiURL <- 'https://en.wikipedia.org/wiki/List_of_United_States_presidential_elections_by_popular_vote_margin'
temp <- wikiURL %>%
read_html %>%
html_nodes("table")
table<-html_table(temp[2])
str(table)
table<-table[[1]]
names(table)<-c("Term_Number", "Year_Elected", "Winner",
"Winner_Party", "Winner_Pop_Vote_%", "Pop_Vote_%_Margin",
"Winner_Pop_Vote_Raw", "Winner_Pop_Vote_Margin",
"Runner_Up", "Runner_Up_Party", "Turnout")
head(table)
table<-table[-c(1,2),]
rownames(table)<-NULL ## I guess that just reset them to start at 1...
str(table)
head(table$Winner)
nchar(table$Winner[1:5])
substr(table$Winner[1:5], 1, ceiling(nchar(table$Winner[1:5])/2))
halfChars<-function(x) substring(x, 1, ceiling((nchar(x))/2))
halfChars("Let's test this out")
table$Winner<-sapply(table$Winner, halfChars)
table$Runner_Up<-sapply(table$Runner_Up, halfChars)
head(table)
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
table$Percent_Margin
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
table$Percent_Margin[i]<-table$Percent_Margin[[i]][i]
}
table$Percent_Margin
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
table$Percent_Margin[i]<-table$Percent_Margin[[i]][1]
}
table$Percent_Margin
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
table$Percent_Margin[i]<-table$Percent_Margin[[i]][2]
}
table$Percent_Margin
for (i in 1:nrow(table)){
table$Percent_Margin[i]<-table$Percent_Margin[[i]][1]
}
table$Percent_Margin
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
table$Percent_Margin[i]<-table$Percent_Margin[[i]][2]
}
for (i in 1:nrow(table)){
table$Percent_Margin[i]<-table$Percent_Margin[[i]][1]
table$Percent_Margin[i]<-unlist(table$Percent_Margin[i])
}
table$Percent_Margin
table$Percent_Margin<-unlist(table$Percent_Margin)
table$Percent_Margin
table
head(table)
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
table$Percent_Margin[i]<-paste("-", table$Percent_Margin[[i]][2])
}
table$Percent_Margin
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
table$Percent_Margin[i]<-paste0("-", table$Percent_Margin[[i]][2])
}
for (i in 1:nrow(table)){
table$Percent_Margin[i]<-table$Percent_Margin[[i]][1]
}
table$Percent_Margin<-unlist(table$Percent_Margin)
table$Percent_Margin
str(table)
names(table)
table<-table[,-("Pop_Vote_%_Margin")]
table<-table[,-(which(names(table)=="Pop_Vote_%_Margin"))]
str(table)
numeric_indices<-which(names(table)==c("Term_Number", "Winner_Party", "Winner_Pop_Vote_%",
"Winner_Pop_Vote_Raw","Turnout", "Percent_Margin"))
words<-c("hello", "HI")
words<-c("hello", "HI", "Hola")
which(words==c("hello", "Hola"))
?which
numeric_indices<-which(names(table)==c("Term_Number", "Winner_Party", "Winner_Pop_Vote_%",
"Winner_Pop_Vote_Raw","Turnout", "Percent_Margin"), arr.ind = T)
numeric_indices<-arrayInd(names(table)==c("Term_Number", "Winner_Party", "Winner_Pop_Vote_%",
"Winner_Pop_Vote_Raw","Turnout", "Percent_Margin"), arr.ind = T)
numeric_indices<-arrayInd(names(table)==c("Term_Number", "Winner_Party", "Winner_Pop_Vote_%",
"Winner_Pop_Vote_Raw","Turnout", "Percent_Margin"))
which(words==("hello"|"Hola"))
which(words==("hello")|("Hola"))
table[,c("Term_Number"|"Winner_Party","Winner_Pop_Vote_%",
"Winner_Pop_Vote_Raw","Turnout", "Percent_Margin"))]
table[,c("Term_Number"|"Winner_Party","Winner_Pop_Vote_%",
"Winner_Pop_Vote_Raw","Turnout", "Percent_Margin")]
table[,c("Term_Number","Winner_Party","Winner_Pop_Vote_%",
"Winner_Pop_Vote_Raw","Turnout", "Percent_Margin")]
table[,c("Term_Number","Winner_Pop_Vote_%","Winner_Pop_Vote_Raw","Turnout", "Percent_Margin")] <-
as.numeric(table[,c("Term_Number","Winner_Pop_Vote_%","Winner_Pop_Vote_Raw","Turnout", "Percent_Margin")])
str(table)
class(table$Percent_Margin)
table[,c("Term_Number","Winner_Pop_Vote_%","Winner_Pop_Vote_Raw","Turnout", "Percent_Margin")] <-
as.numeric(table[,c("Term_Number","Winner_Pop_Vote_%","Winner_Pop_Vote_Raw","Turnout", "Percent_Margin")])
for (i in 1:names(table)){
print(class(table$i))
}
for (i in names(table)){
print(class(table$i))
}
for (i in names(table)){
print(i)
}
for (i in names(table)){
print(class(table[,i]))
}
str(table)
table[,c(1,5,6,10,11)] <-as.numeric(table[,c(1,5,6,10,11)])
table[,c(1,5,6,10,11)] <-as.numeric(as.character(table[,c(1,5,6,10,11)]))
table
rm(list=ls())
library(plyr)
library(rvest)
wikiURL <- 'https://en.wikipedia.org/wiki/List_of_United_States_presidential_elections_by_popular_vote_margin'
## Grab the tables from the page and use the html_table function to extract the tables.
## You need to subset temp to find the data you're interested in (HINT: html_table())
temp <- wikiURL %>%
read_html %>%
html_nodes("table")
table<-html_table(temp[2])
str(table)
table$Turnout<-as.numeric(table$Turnout)
str(table)
wikiURL <- 'https://en.wikipedia.org/wiki/List_of_United_States_presidential_elections_by_popular_vote_margin'
temp <- wikiURL %>%
read_html %>%
html_nodes("table")
table<-html_table(temp[2])
str(table)
table<-table[[1]]
names(table)<-c("Term_Number", "Year_Elected", "Winner",
"Winner_Party", "Winner_Pop_Vote_%", "Pop_Vote_%_Margin",
"Winner_Pop_Vote_Raw", "Winner_Pop_Vote_Margin",
"Runner_Up", "Runner_Up_Party", "Turnout")
head(table)
table<-table[-c(1,2),]
rownames(table)<-NULL ## I guess that just reset them to start at 1...
str(table)
nchar(table$Winner[1:5])
substr(table$Winner[1:5], 1, ceiling(nchar(table$Winner[1:5])/2))
halfChars<-function(x) substring(x, 1, ceiling((nchar(x))/2))
halfChars("Let's test this out")
table$Winner<-sapply(table$Winner, halfChars)
table$Runner_Up<-sapply(table$Runner_Up, halfChars)
head(table)
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
table$Percent_Margin[i]<-paste0("-", table$Percent_Margin[[i]][2])
}
for (i in 1:nrow(table)){
table$Percent_Margin[i]<-table$Percent_Margin[[i]][1]
}
table$Percent_Margin<-unlist(table$Percent_Margin)
table$Percent_Margin
table<-table[,-(which(names(table)=="Pop_Vote_%_Margin"))]
str(table)
table2<-table
?sapply
dim(table2)
apply(table2[,c(1,5,6,10,11)], 2, function(x) x<-as.numeric(x))
table2<-table
apply(table2[,c(1,5,6,10,11)], 2, function(x) x<-as.numeric(as.character(x)))
table2<-table
str(table2)
this<-"115,999"
as.numeric(this)
as.numeric(gsub(",", "", this)
)
apply(table2[,c(1,5,6,10,11)], 2, function(x){
gsub("%", "", x)
gsub(",", "", x)
} x<-as.numeric(as.character(x)))
apply(table2[,c(1,5,6,10,11)], 2, function(x){
gsub("%", "", x)
gsub(",", "", x)
x<-as.numeric(as.character(x))})
table2<-table
table2$Winner_Pop_Vote_Raw
as.numeric(table2$Winner_Pop_Vote_Raw)
gsub(",", "", table2$Winner_Pop_Vote_Raw)
as.numeric(table2$Winner_Pop_Vote_Raw)
table2<-table
gsub(",", "", table2$Winner_Pop_Vote_Raw)
table2$Winner_Pop_Vote_Raw
table2<-table
dim(table2)
apply(table2[,c(1,5,6,10,11)], 2, function(x){
x<-gsub("%", "", x)
x<-gsub(",", "", x)
x<-as.numeric(as.character(x))})
str(table)
apply(table[,c(1,5,6,10,11)], 2, function(x){
x<-gsub("%", "", x)
x<-gsub(",", "", x)
x<-as.numeric(as.character(x))})
str(table)
table[,c(1,5,6,10,11)]<- apply(table[,c(1,5,6,10,11)], 2, function(x){
x<-gsub("%", "", x)
x<-gsub(",", "", x)
x<-as.numeric(as.character(x))})
str(table)
table$Winner_Pop_Vote_Percent<-table$`Winner_Pop_Vote_%`
str(table)
rm(list=ls())
getwd()
library(plyr)
library(rvest)
wikiURL <- 'https://en.wikipedia.org/wiki/List_of_United_States_presidential_elections_by_popular_vote_margin'
## Grab the tables from the page and use the html_table function to extract the tables.
## You need to subset temp to find the data you're interested in (HINT: html_table())
temp <- wikiURL %>%
read_html %>%
html_nodes("table")
###### SCRAPING THE DATA #########
### data of interest:
table<-html_table(temp[2])
str(table)
## table is a list of one element, which is a data.frame
##  extracting the data.frame
table<-table[[1]]
## fixing names
names(table)<-c("Term_Number", "Year_Elected", "Winner",
"Winner_Party", "Winner_Pop_Vote_Percent", "Pop_Vote_%_Margin",
"Winner_Pop_Vote_Raw", "Winner_Pop_Vote_Margin",
"Runner_Up", "Runner_Up_Party", "Turnout")
head(table)
## no data in first two rows
## removing first two rows
table<-table[-c(1,2),]
## row names mean nothing. getting rid of them
rownames(table)<-NULL ## I guess that just reset them to start at 1...
str(table)
head(table$Winner)
## all the names have been copied twice...
## ... but, they all follow a pattern: Last, FirstFirst Last
##    or: Last, First MiddleFirst Middle Last
## The ceiling of half of the number of characters in these hideous strings
##    will be the correct number of characters in the president's names
nchar(table$Winner[1:5])
substr(table$Winner[1:5], 1, ceiling(nchar(table$Winner[1:5])/2))
## creating a function...
halfChars<-function(x) substring(x, 1, ceiling((nchar(x))/2))
halfChars("Let's test this out")
## applying the function to Winner
table$Winner<-sapply(table$Winner, halfChars)
## applying the function to Runner-Up
table$Runner_Up<-sapply(table$Runner_Up, halfChars)
head(table)
## Problem: for both "Pop_Vote_%_Margin" and "Winner_Pop_Vote_Margin" mashed up two different figures...
##    we can separate out the figures for Pop_Vote_%_Margin
table$Percent_Margin<-strsplit(table$`Pop_Vote_%_Margin`, split = "%")
## deal with the first four values: figures combined by "−" instead of "%"
for (i in 1:4){
table$Percent_Margin[i]<-strsplit(table$Percent_Margin[[i]], split="−")
table$Percent_Margin[i]<-paste0("-", table$Percent_Margin[[i]][2])
}
## remaining values in "Percent_Margin" variable:
##    all lists, either with one element, or with two identical elements
for (i in 1:nrow(table)){
table$Percent_Margin[i]<-table$Percent_Margin[[i]][1]
}
table$Percent_Margin<-unlist(table$Percent_Margin)
## now we have a clean Percent_Margin variable
table$Percent_Margin
table<-table[,-(which(names(table)=="Pop_Vote_%_Margin"))]
## NOTE: won't be able to use Winner_Pop_Vote_Margin
## let's make sure all variables are the right class...
str(table)
table[,c(1,5,6,10,11)]<- apply(table[,c(1,5,6,10,11)], 2, function(x){
x<-gsub("%", "", x)
x<-gsub(",", "", x)
x<-as.numeric(as.character(x))})
str(table)
###### VISUALIZING #########
str(table)
plot(table$Turnout, table$Percent_Margin)
plot(table$Turnout[table$Term_Number>25], table$Percent_Margin[table$Term_Number>25])
plot(table$Turnout[table$Term_Number>35], table$Percent_Margin[table$Term_Number>35])
plot(table$Turnout[table$Term_Number<25], table$Percent_Margin[table$Term_Number<25])
plot(table$Turnout[table$Term_Number<40], table$Percent_Margin[table$Term_Number<40])
lm(table$Percent_Margin[table$Term_Number<40]~table$Turnout[table$Term_Number<40])
model<-lm(table$Percent_Margin[table$Term_Number<40]~table$Turnout[table$Term_Number<40])
abline(model)
summary(table$Turnout)
model<-lm(table$Percent_Margin[~table$Turnout)
plot(table$Turnout, table$Percent_Margin)
model<-lm(table$Percent_Margin~table$Turnout)
abline(model)
model
plot(table$Turnout, table$Percent_Margin)
model<-lm(table$Percent_Margin~table$Turnout)
abline(model)
table[table$Percent_Margin==min(table$Percent_Margin),]
table[table$Percent_Margin==min(table$Percent_Margin[table$Term_Number!=10),]
table[table$Percent_Margin==min(table$Percent_Margin[table$Term_Number!=10]),]
plot(table$Turnout[-1,], table$Percent_Margin[-1,])
plot(table$Turnout[-1], table$Percent_Margin[-1])
model<-lm(table$Percent_Margin[-1]~table$Turnout[-1])
abline(model)
model
plot(table$Turnout[-1], table$Percent_Margin[-1],
main = ("Voter Turnout and Vote Margin"), xlab = "Voter turnout (%)", ylab="Vote margin (%)")
model<-lm(table$Percent_Margin[-1]~table$Turnout[-1])
abline(model)
model
str(model)
model$r.squared
summary(model)$r.squared
